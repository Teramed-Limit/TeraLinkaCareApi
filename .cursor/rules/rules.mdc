---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
---
# .NET 8 Web API 開發規範

## 語言與框架
- 使用 C# 12 作為程式語言，.NET 8 作為框架。
- 所有程式碼應利用 .NET 8 最新特性，如 Minimal APIs、AOT (Ahead-of-Time) 編譯、強型別 HTTP 端點 等。

## 原則
- 提供簡潔且技術性的回應。
- 避免重複程式碼，確保程式碼 模組化、可重複使用 且 易於維護。
- 遵循 物件導向設計 (OOP) 和 SOLID 原則。
- 使用具描述性且有意義的變數與方法名稱。
## 開發規範

### 1. API 設計與開發
- 使用 Minimal APIs 或 Controllers（依需求選擇）。
- 遵循 RESTful API 設計原則，使用 HTTP 方法 (GET, POST, PUT, DELETE)。
- 實作 API 版本控制 (API Versioning)，確保向後相容性。
- 使用 Swagger (OpenAPI) 來自動生成 API 文件。
- 支援 CORS (Cross-Origin Resource Sharing) 以允許跨域請求。

### 3. 身份驗證與授權 (Authentication & Authorization)
- 使用 JWT (JSON Web Token) 進行 API 認證。
- 使用 ASP.NET Core 授權政策 (Authorization Policies) 進行角色與權限管理。

### 4. 資料庫操作 (Database Operations)
- 使用 EF Core 8 進行資料庫操作，支援 JSON 資料型別與更高效能的查詢優化。
- 使用 LINQ 來處理複雜查詢，避免直接執行 SQL 查詢。
- 實作 Repository Pattern 來封裝資料存取邏輯。
- 使用 Migration (遷移) 來管理資料庫模式變更。

### 5. 錯誤處理 (Error Handling)
- 實作全域例外處理中介軟體 (Global Exception Handling Middleware)，統一處理異常狀況。
- API 回傳標準化錯誤訊息（使用 `ProblemDetails` 格式）。
- 針對不同錯誤類型回傳適當的 HTTP 狀態碼 (400, 401, 403, 404, 500)。

### 6. 日誌 (Logging)
- 使用 Serilog 進行結構化日誌記錄，並輸出至多個接收端（檔案、Console、Seq、ElasticSearch 等）。
- 記錄關鍵 API 請求與回應，包括使用者 ID、IP、請求路徑等。
- 錯誤日誌應包含完整的堆疊追蹤 (Stack Trace) 以利偵錯。

### 7. 效能最佳化 (Performance Optimization)
- 使用 MemoryCache 或 Redis 來提升效能，減少頻繁的資料庫查詢。
- 非同步處理 I/O 密集型操作 (如 API 呼叫、DB 存取)，避免阻塞執行緒。
- 開啟 Response Compression 以減少傳輸大小，提升 API 響應速度。

### 8. 測試 (Testing)
- 為商業邏輯與驗證邏輯撰寫單元測試 (Unit Tests)。
- 為 API 端點撰寫整合測試 (Integration Tests)。
- 使用 xUnit 或 NUnit 作為測試框架。

### 9. 安全性 (Security)
- 加密敏感數據，確保機密資訊安全 (如 `Data Protection`、`AES` 加密)。
- 防止 CSRF 攻擊，並對所有輸入數據進行驗證。
- 確保 API 只允許 HTTPS 請求，拒絕 HTTP 連線。

